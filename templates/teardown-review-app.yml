name: "Teardown Review App"
on:
  pull_request:
    types: [closed]

env:
  ECR_REPO: fleet-ecr
  PROJECT: APP_NAME # request-bin
  SUBNET_NAME: DEFAULT_SUBNET_NAME # Fleet-Subnet
  SG_NAME: CLUSTER_SECURITY_GROUP # Fleet-Security-3
  FS_TOKEN: EFS_CREATION_TOKEN # FleetFS
  REGION: USER_AWS_REGION # us-east-2
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  teardown:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Delete Image from ECR
        id: delete-ecr-image
        run: |
          ECR_IMAGE_TAG=${{ env.PROJECT }}-${{ env.PR_NUMBER }}

          ECR_SEED_IMAGE_TAG=${{ env.PROJECT }}-seed-${{ env.PR_NUMBER }}

          aws ecr batch-delete-image \
          --repository-name $ECR_REPO \

          --image-ids imageTag=$ECR_IMAGE_TAG imageTag=$ECR_SEED_IMAGE_TAG \
          --query 'imageIds[*].imageTag'


      - name: Deregister App Task Definition
        id: deregister-app-task
        run: |
          TASK_FAMILY=${{ env.PROJECT }}-${{ env.PR_NUMBER }}

          APP_TASK_ARN=$(aws ecs list-task-definitions \
          --family-prefix $TASK_FAMILY \
          --query 'taskDefinitionArns[0]' \
          --output text)

          aws ecs deregister-task-definition \

          --task-definition $APP_TASK_ARN \
          --query 'taskDefinition.taskDefinitionArn'


      - name: Deregister Setup Task Definition
        id: deregister-setup-task
        run: |
          SETUP_TASK_FAMILY=${{ env.PROJECT }}-setup-${{ env.PR_NUMBER }}

          SETUP_TASK_ARN=$(aws ecs list-task-definitions \
          --family-prefix $SETUP_TASK_FAMILY \
          --query 'taskDefinitionArns[0]' \
          --output text)

          aws ecs deregister-task-definition \

          --task-definition $SETUP_TASK_ARN \
          --query 'taskDefinition.taskDefinitionArn'


      - name: Stop ECS Service
        id: stop-ecs-service
        run: |
          ECS_SERVICE_NAME=$(aws ecs list-services \
          --cluster $PROJECT \
          --query 'serviceArns[*]' \
          | grep -o "$PROJECT-$PR_NUMBER[^\"]*")

          aws ecs delete-service \
          --cluster $PROJECT \
          --service $ECS_SERVICE_NAME \

          --force \
          --query 'service.serviceName'

      - name: delete access points
        id: delete-access-points
        run: |
          DATA_ACCESS_POINT=$(aws efs describe-access-points \
          --query "AccessPoints[?ClientToken=='$PROJECT-$PR_NUMBER-data'] | [0].AccessPointId" \
          --output text)
          aws efs delete-access-point --access-point-id $DATA_ACCESS_POINT

          SEED_ACCESS_POINT=$(aws efs describe-access-points \
          --query "AccessPoints[?ClientToken=='$PROJECT-$PR_NUMBER-seed'] | [0].AccessPointId" \
          --output text)
          aws efs delete-access-point --access-point-id $SEED_ACCESS_POINT


      - name: Create Deleter Image
        id: create-deleter
        run: |
          IMAGE=${{ steps.login-ecr.outputs.registry }}/$ECR_REPO:$PROJECT-deleter-$PR_NUMBER


          cat << SCRIPT > ./deleter-script.sh
          #!/bin/sh
          echo 'before delete, heres the root:'
          ls /efs-file-transfer/
          sleep 1
          echo 'contents of the current pr folder:'
          ls ./efs-file-transfer/$PROJECT-$PR_NUMBER
          sleep 1
          echo 'contents of the data folder:'
          ls ./efs-file-transfer/$PROJECT-$PR_NUMBER/data
          sleep 1
          echo 'contents of the seed folder:'
          ls ./efs-file-transfer/$PROJECT-$PR_NUMBER/seed
          sleep 1
          rm -rf /efs-file-transfer/$PROJECT-$PR_NUMBER
          echo 'after delete, heres the root:'
          ls /efs-file-transfer/
          sleep 1
          echo 'try to list files in /$PROJECT-$PR_NUMBER:'
          ls ./efs-file-transfer/$PROJECT-$PR_NUMBER
          sleep 1
          echo There should be an error above, No such file or directory
          SCRIPT

          echo "::set-output name=deleter-image-arn::$IMAGE"
          docker build -t $IMAGE -f- . <<DOCKERFILE
          FROM alpine:3.13
          RUN mkdir /efs-file-transfer
          COPY ./deleter-script.sh /startup.sh
          RUN chmod +x /startup.sh
          ENTRYPOINT ["/startup.sh"]
          DOCKERFILE


      - name: Push Deleter to ECR
        id: push-deleter
        run: |
          docker push ${{ steps.create-deleter.outputs.deleter-image-arn }}

      - name: set required environment variables
        id: aws-ids
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}

          echo "::set-output name=subnet-id::$( \
            aws ec2 describe-subnets \
              --filters Name=tag:Name,Values=$SUBNET_NAME \
              --query 'Subnets[0].SubnetId' \
              --output text)"
          echo "::set-output name=sg-id::$( \
            aws ec2 describe-security-groups \
              --filters Name=group-name,Values=$SG_NAME \
              --query 'SecurityGroups[0].GroupId' \
              --output text)"
          echo "::set-output name=task-execution-role-arn::$( \
            aws iam get-role \
              --role-name fleetTaskExecutionRole \
              --query 'Role.Arn' \
              --output text)"
          echo "::set-output name=efs-id::$( \
            aws efs describe-file-systems \
              --creation-token $FS_TOKEN \
              --query 'FileSystems[0].FileSystemId' \
              --output text)"

      - name: write task definition for deleter
        id: write-task-def
        run: |
          cat << EOF > ./delete-task.json
          {
            "family": "$PROJECT-$PR_NUMBER-delete",
            "networkMode": "awsvpc",
            "executionRoleArn": "${{ steps.aws-ids.outputs.task-execution-role-arn }}",
            "containerDefinitions": [
              {
                "name": "db-setup",
                "image": "${{ steps.create-deleter.outputs.deleter-image-arn }}",
                "mountPoints": [
                  {
                    "sourceVolume": "sql-delete",
                    "containerPath": "/efs-file-transfer"
                  }
                ],
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-create-group": "true",
                    "awslogs-region": "$REGION",
                    "awslogs-group": "fleet-logs-$PROJECT-$PR_NUMBER-delete",
                    "awslogs-stream-prefix": "$PROJECT-$PR_NUMBER"
                  }
                },
                "memory": 500,
                "cpu": 10
              }
            ],
            "volumes": [
              {
                "name": "sql-delete",
                "efsVolumeConfiguration": {
                  "fileSystemId": "${{ steps.aws-ids.outputs.efs-id }}",
                  "rootDirectory": "/"
                }
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF

      - name: Register Deleter Task Definition
        id: register-delete-task
        run: |
          echo "::set-output name=delete-task-def::$(aws ecs register-task-definition \
          --family $PROJECT-delete-$PR_NUMBER \
          --cli-input-json file://delete-task.json \
          --query 'join(`:`,taskDefinition.[family,to_string(revision)])' \
          --output text)"

      - name: Launch Deleter Task
        id: launch-delete-task
        run: |
          echo "::set-output name=delete-task-arn::$(aws ecs run-task \
            --cluster $PROJECT \
            --task-definition ${{ steps.register-delete-task.outputs.delete-task-def }} \
            --count 1 \
            --launch-type "FARGATE" \
            --network-configuration "awsvpcConfiguration={ \
                subnets=[${{ steps.aws-ids.outputs.subnet-id }}], \
                securityGroups=[${{ steps.aws-ids.outputs.sg-id }}], \
                assignPublicIp=ENABLED \
              }" \
            --query 'tasks[0].taskArn' \
            --output text)"

      - name: Wait for Deleter Task to Finish
        run: |
          aws ecs wait tasks-stopped --cluster $PROJECT \
          --tasks ${{ steps.launch-delete-task.outputs.delete-task-arn }}

      - name: deregister Deleter Task Definition
        run: |
          aws ecs deregister-task-definition \
            --task-definition ${{ steps.register-delete-task.outputs.delete-task-def }}

      - name: Delete Deleter Image from ECR
        id: delete-deleter-ecr-image
        run: |
          ECR_DELETE_IMAGE_TAG=${{ env.PROJECT }}-deleter-${{ env.PR_NUMBER }}

          aws ecr batch-delete-image \
          --repository-name $ECR_REPO \

          --image-ids imageTag=$ECR_DELETE_IMAGE_TAG

