AWSTemplateFormatVersion: "2010-09-09"
Description: Setup for Fleet Apps
Metadata:

Parameters:
  DefaultName:
    Description: Default Name Prefix For your AWS Content
    Type: String
    Default: fleet-apps
  ECRName:
    Description: Name of the ECR Repository
    Type: String
    Default: fleet-ecr
  UserAWSRegion:
    Description: The AWS Region you want your infrastructure in
Mappings:

Conditions:

Resources:
  FleetVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "{DefaultName}"
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref FleetVPC
  FleetIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "{DefaultName}"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref FleetVPC
      InternetGatewayId: !Ref FleetIGW
  InternetConnection:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref FleetInternet
  ClusterSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub {UserAWSRegion}a
      VpcId: !Ref FleetVPC
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub "{DefaultName}"
  ClusterInternet:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnet
      RouteTableId: !Ref RouteTable
  ALBSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "{UserAWSRegion}a"
      VpcId: !Ref FleetVPC
      CidrBlock: 10.0.2.0/24
  ALBInternetA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ALBSubnetA
      RouteTableId: !Ref RouteTable
  ALBSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub "{UserAWSRegion}b"
      VpcId: !Ref FleetVPC
      CidrBlock: 10.0.3.0/24
  ALBInternetB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ALBSubnetB
      RouteTableId: !Ref RouteTable
  ClusterSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "{DefaultName}-cluster"
      GroupDescription: Security group for the running ECS services
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: Allow port 8080 inbound traffic
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !GetAtt ALBSecurity.GroupId
        - Description: Allow 2049 inbound traffic
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt EFSSecurity.GroupId
      # By not defining SecurityGroupEgress, it allows all outbound traffic
  EFSSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: FleetEFSSecurity
      GroupDescription: Security Group for the Elastic File System
      VpcId: !Ref FleetVPC

      # Only let EFS talk to the cluster
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt ClusterSecurity.GroupId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          DestinationSecurityGroupId: !GetAtt ClusterSecurity.GroupId
  ALBSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: FleetAlbSecurity
      GroupDescription: Fleet Security Group for the Application Load Balancer
      VpcId: !Ref FleetVPC

      #Allow all incoming internet traffic to the ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

      # Only let it talk to the cluster
      SecurityGroupEgress:
        - IpProtocol: TCP
          FromPort: 8080
          ToPort: 8080
          DestinationSecurityGroupId: !GetAtt ClusterSecurity.GroupId
  EFS:
    Type: AWS::EFS::FileSystem
    Properties: 
      AvailabilityZoneName: !Sub "{UserAWSRegion}a"
      FileSystemTags: 
        - Key: Name
          Value: !Sub "{DefaultName}"
      PerformanceMode: generalPurpose
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFS
      SecurityGroups: 
        - !Ref EFSSecurity
      SubnetId: !Ref ClusterSubnet
  FleetRepo:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub "{ECRName}"
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Name: !Sub "{DefaultName}"
      SecurityGroups: 
        - !Ref ALBSecurity
      Subnets: 
        - !Ref ALBSubnetA
        - !Ref ALBSubnetB
  FleetTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: fleetTaskExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"

Outputs:
